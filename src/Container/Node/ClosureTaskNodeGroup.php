<?php

declare(strict_types=1);

namespace Multitron\Container\Node;

use Closure;
use InvalidArgumentException;
use RuntimeException;
use Throwable;

/**
 * Represents a group of task nodes that are generated dynamically using a closure.
 *
 * This class allows for lazy loading of task nodes through a factory closure,
 * which can help with performance and memory optimization in large task graphs.
 */
final class ClosureTaskNodeGroup extends TaskNode
{
    /**
     * @param string $id Unique identifier for the task node group
     * @param Closure(): iterable<TaskNode> $factory Closure that generates task nodes
     * @throws InvalidArgumentException If the ID is empty
     */
    public function __construct(
        string $id,
        private readonly Closure $factory
    ) {
        if (trim($id) === '') {
            throw new InvalidArgumentException('Task node group ID cannot be empty');
        }

        parent::__construct($id);
    }

    /**
     * Retrieves the task nodes generated by the factory closure.
     *
     * @return iterable<TaskNode>
     * @throws RuntimeException If the factory returns invalid nodes
     */
    protected function getNodes(): iterable
    {
        try {
            foreach (($this->factory)() as $node) {
                /** @var TaskNode|mixed $node */
                if (!$node instanceof TaskNode) {
                    throw new RuntimeException(
                        sprintf(
                            'Factory must return instances of TaskNode, got %s',
                            get_debug_type($node)
                        )
                    );
                }
                yield $node;
            }
        } catch (Throwable $e) {
            throw new RuntimeException(
                'Failed to generate task nodes from factory',
                0,
                $e
            );
        }
    }
}
